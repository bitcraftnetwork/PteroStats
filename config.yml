// handlers/configuration.js

function getEnv(name, fallback = '') {
    const value = process.env[name];
    return value !== undefined ? value : fallback;
}

module.exports = {
    version: 9,
    presence: {
        enable: getEnv('PRESENCE_ENABLE', 'true') === 'true',
        text: getEnv('PRESENCE_TEXT', 'Hosting Panel'),
        type: getEnv('PRESENCE_TYPE', 'watching'),
        status: getEnv('PRESENCE_STATUS', 'online')
    },
    refresh: parseInt(getEnv('REFRESH', '10')),
    timeout: parseInt(getEnv('TIMEOUT', '5')),
    message: {
        content: getEnv('MESSAGE_CONTENT', ''),
        attachment: getEnv('MESSAGE_ATTACHMENT', '')
    },
    embed: {
        panel: {
            author: {
                name: getEnv('EMBED_PANEL_AUTHOR_NAME', 'Hosting Panel'),
                icon: getEnv('EMBED_PANEL_AUTHOR_ICON', '')
            },
            title: getEnv('EMBED_PANEL_TITLE', 'Panel Stats'),
            description: getEnv('EMBED_PANEL_DESC', 'Next update {{time}}'),
            timestamp: getEnv('EMBED_PANEL_TIMESTAMP', 'false') === 'true',
            color: getEnv('EMBED_PANEL_COLOR', '5865F2'),
            footer: {
                text: getEnv('EMBED_PANEL_FOOTER_TEXT', ''),
                icon: getEnv('EMBED_PANEL_FOOTER_ICON', '')
            },
            thumbnail: getEnv('EMBED_PANEL_THUMBNAIL', ''),
            image: getEnv('EMBED_PANEL_IMAGE', '')
        },
        nodes: {
            author: {
                name: getEnv('EMBED_NODES_AUTHOR_NAME', ''),
                icon: getEnv('EMBED_NODES_AUTHOR_ICON', '')
            },
            title: getEnv('EMBED_NODES_TITLE', 'Nodes Stats'),
            description: getEnv('EMBED_NODES_DESC', ''),
            timestamp: getEnv('EMBED_NODES_TIMESTAMP', 'true') === 'true',
            color: getEnv('EMBED_NODES_COLOR', '5865F2'),
            footer: {
                text: getEnv('EMBED_NODES_FOOTER_TEXT', 'By @HirziDevs'),
                icon: getEnv('EMBED_NODES_FOOTER_ICON', '')
            },
            thumbnail: getEnv('EMBED_NODES_THUMBNAIL', ''),
            image: getEnv('EMBED_NODES_IMAGE', '')
        }
    },
    button: {
        enable: getEnv('BUTTON_ENABLE', 'true') === 'true',
        row1: [
            {
                label: getEnv('BUTTON_1_LABEL', 'Panel'),
                url: getEnv('BUTTON_1_URL', 'https://panel.example.com')
            }
            // Add more buttons if needed in code manually
        ]
    },
    status: {
        online: getEnv('STATUS_ONLINE', ':green_circle: Online'),
        offline: getEnv('STATUS_OFFLINE', ':red_circle: Offline')
    },
    nodes_settings: {
        blacklist: JSON.parse(getEnv('NODE_BLACKLIST', '[]')),
        details: getEnv('NODE_DETAILS', 'true') === 'true',
        servers: getEnv('NODE_SERVERS', 'false') === 'true',
        allocations_as_max_servers: getEnv('NODE_ALLOC_AS_MAX', 'false') === 'true',
        host: getEnv('NODE_HOST', 'false') === 'true',
        unit: getEnv('NODE_UNIT', 'byte'),
        uptime: getEnv('NODE_UPTIME', 'true') === 'true',
        limit: parseInt(getEnv('NODE_LIMIT', '100'))
    },
    panel_settings: {
        status: getEnv('PANEL_STATS_ENABLE', 'true') === 'true',
        host: getEnv('PANEL_STATS_HOST', 'false') === 'false',
        uptime: getEnv('PANEL_STATS_UPTIME', 'true') === 'true',
        servers: getEnv('PANEL_STATS_SERVERS', 'true') === 'true',
        users: getEnv('PANEL_STATS_USERS', 'true') === 'true'
    },
    notifier: {
        enable: getEnv('NOTIFIER_ENABLE', 'false') === 'true',
        webhook: getEnv('NOTIFIER_WEBHOOK', ''),
        embed: {
            author: {
                name: getEnv('NOTIFIER_AUTHOR_NAME', ''),
                icon: getEnv('NOTIFIER_AUTHOR_ICON', '')
            },
            timestamp: getEnv('NOTIFIER_TIMESTAMP', 'true') === 'true',
            footer: {
                text: getEnv('NOTIFIER_FOOTER_TEXT', 'PteroStats Notifier'),
                icon: getEnv('NOTIFIER_FOOTER_ICON', '')
            },
            thumbnail: getEnv('NOTIFIER_THUMBNAIL', ''),
            image: getEnv('NOTIFIER_IMAGE', '')
        }
    },
    log_error: getEnv('LOG_ERRORS', 'false') === 'true'
};
